extends ../../common/main

include ../../common/mixins

block content
    h1#select-builder Select Builder

    p.
        The select builder allows you to create #[+link('https://devdocs.io/postgresql~10/sql-insert','SELECT queries')],
        to fetch data from your database.

    article
        h2.method#select .select(...columns:Pointers[])

        p.
            The select builder factory takes as argument a list of #[+link('builders/index.html#pointers','pointers')] with or without
            alias. You can also use any aggregation function.

        +codeblock
            include:highlight(lang='javascript') snippets/select.js

        p.tip.
            You can also use it without any argument: the wildcard sign #[code *] will be used instead.

        p.tip.
            You can also call #[code .select(...args)] as a method of an existing select builder
             with the same effect (if you only know a part of the column list later, when your builder has already been instantiated)

    article
        h2.method#from .from(...tables:Pointers[])

        p.
            This method allows you to specify a list of tables. It takes the same kind of arguments as the #[+link('builders/select/index.html#select','select')]
            method.

        +codeblock
            include:highlight(lang='javascript') snippets/select-from.js

        p.tip.
            If you use a sub query as a table expression, SQL syntax enforces you to use an alias

    article
        h2#joins Joins

        p.
            There are few methods to join table together. They take the same arguments as the #[+link('builders/select/index.html#from','from method')].
            You usually call the #[+link('builders/select/index.html#on','on method')] after you have joined a table to apply a join condition but you can
            also pass a #[em leftOperand] and a #[em rightOperand] for usual join equality condition

        h3#join .join(table: Pointer, operator?, rightOperand?)

        p.
            Performs an #[strong INNER JOIN]

        h3#left-join .leftJoin(table: Pointer, leftOperand?, rightOperand?)

        p.
            Performs a #[strong LEFT OUTER JOIN]

        h3#right-join .rightJoin(table: Pointer, leftOperand?, rightOperand?)

        p.
            Performs a #[strong RIGHT OUTER JOIN]

        p.tip.
            You can of course combine multiple joins.

        h3#on .on(leftOperand: Pointer, operator ?: Operator, rightOperand?: value)

        p.
            This method returns a proxy of a condition builder which will be revoked whenever you call a method which does not belong to the condition builder.
            See #[+link('builders/conditions/index.html','conditions builder')] for more details. You use it to create a join condition on a particular join

        +codeblock
            include:highlight(lang='javascript') snippets/select-join.js
    article
        h2#group Group

        p.
            You can decide to group some rows and eventually filter those groups.

        h3.method#group-by .groupBy(...columns:string[])

        p.
            This method allows you to create a #[+link('https://devdocs.io/postgresql~10/sql-select#SQL-GROUPBY','group by')] clause.
            Just pass column names you wish to group by

        +codeblock
            include:highlight(lang='javascript') snippets/select-group-by.js

        h3.method#having .having(leftOperand: Pointer, operator?, rightOperand?)

        p.
            This method allows you to apply a filter on grouped rows. It defers from #[+link('builders/select/index.html#where','the where clause')] which
            applies the filter #[strong before] the groups are formed. In the same way as the #[+link('builders/select/index.html#where','the where method')] it returns a
            proxied condition builder so you can chain conditions

        +codeblock
            include:highlight(lang='javascript') snippets/select-group-by-having.js

    article
        h2.mtehod#where .where(leftOperand, ?operator, ?rightOperand)

        p.
            This method returns a proxy of a condition builder which will be revoked whenever you call a method which does not belong to the condition builder.
            See #[+link('builders/conditions/index.html','conditions builder')] for more details. You use it to create where clause in your select query

        +codeblock
            include:highlight(lang='javascript') snippets/select-where.js
    article
        h2.method#order-by .orderBy(column: string, direction?: SortDirection)

        p.
            This method will let you order the result rows according to a given column. The second argument will give the direction:
            it can be #[code 'desc'] either #[code 'asc']. If no direction is provided the direction will be ascendant.

        +codeblock
            include:highlight(lang='javascript') snippets/select-order-by.js

        p.tip.
            You can combine different order by clauses by calling multiple times the #[code orderBy] method.
    article
        h2#pagination Pagination

        p.
            To have your rows paginated you have to combine the SQL clauses LIMIT and OFFSET.
            In ship hold this is controlled by the #[code limit] method

        h3.method#limit .limit(size: number, offset?: number)

        p.
            The first argument will be the size of you page whereas the second one will be the number of row skipped.
            If you don't provide a second argument, no row will be skipped

        +codeblock
            include:highlight(lang='javascript') snippets/select-limit.js

        p.tip.
            If you want to have consistent pagination result, you #[strong have to] order your result. Otherwise the database
            may return different results depending on the query plan it has chosen.







